#+PROPERTY: header-args :results silent
#+PROPERTY: header-args:emacs-lisp :lexical t
* Emacs Init Settings
** Setup Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
  (add-to-list 'package-archives (cons "org" "https://orgmode.org/elpa/") t)

  (package-initialize)
#+END_SRC
** Use Package Settings
#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq use-package-always-ensure t ; Auto-download package if not exists
	;use-package-verbose nil ; Don't report loading details
	;use-package-expand-minimally t  ; make the expanded code as minimal as possible
	use-package-enable-imenu-support t ; Let imenu finds use-package definitions
	use-package-always-defer t) ; Always defer load package to speed up startup

#+END_SRC
** Custom Variables and Faces
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC
** Key Bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'counsel-org-capture)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** General Appearance and Behavior
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (column-number-mode 1)
  (display-battery-mode 1)
  (blink-cursor-mode 0)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq echo-keystrokes 0.1)
  ;(setq visible-bell t)
  (setq dired-listing-switches "-alh")
  (setq split-width-threshold 100)
#+END_SRC

Put all the backup files and auto-saves into the directory pointed by
temporary-file-directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :init
    (load-theme 'zenburn t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :disabled
    :init
    (setq doom-themes-enable-bold t  
	  doom-themes-enable-italic t) 
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :disabled
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-bar-width 6
	  doom-modeline-buffer-encoding t
	  doom-modeline-continuous-word-count-modes '(markdown-mode org-mode)
	  doom-modeline-enable-word-count t
	  doom-modeline-github nil
	  doom-modeline-gnus t
	  doom-modeline-gnus-timer 5
	  doom-modeline-height 25
	  doom-modeline-icon t
	  doom-modeline-indent-info nil
	  doom-modeline-mu4e nil
	  doom-modeline-unicode-fallback t
	  doom-modeline-vcs-max-length 10))

  (use-package ghub)
  (use-package async)
  (use-package circe)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  ;run M-x all-the-icons-install-fonts
#+END_SRC

** Org Mode
*** Habits
#+begin_src emacs-lisp 
  (setq org-habit-graph-column 55
	org-habit-preceding-days 10
	org-habit-following-days 7
	org-habit-show-habits-only-for-today t)
#+end_src
*** Todos
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANCELED(c)"))
	org-todo-keyword-faces '(
				 ("TODO" . (:foreground "red" :weight bold))
				 ("NEXT" . (:foreground "yellow" :weight bold))
				 ("DONE" . (:foreground "green" :weight bold))
				 ("HOLD" . (:foreground "magenta" :weight bold))
				 ("WAITING" . (:foreground "orange" :weight bold))
				 ("CANCELED" . (:foreground "gray" :weight bold))
				 )
	)
  (setq org-enforce-todo-dependencies t)
#+END_SRC
*** Agenda 
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/git/org/projects/"))
  (setq org-agenda-custom-commands 
	'(("x" "NEXT tasks / Agenda / Stuck"
	   (
	    (todo "NEXT" nil)
	    (agenda ""
		    ((org-agenda-span
		      (quote day))))
	    (stuck "" nil))
	   nil
	   ("~/org/scratch.html"))))

  (setq org-agenda-sorting-strategy '((agenda time-up habit-up deadline-up todo-state-down priority-down effort-down category-keep)
				      (todo deadline-up priority-down effort-down category-keep)
				      (tags priority-down category-keep)
				      (search category-keep)))

  (setq org-agenda-todo-ignore-scheduled nil)
  (setq org-agenda-todo-ignore-deadlines nil)
  (setq org-deadline-warning-days 14)
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
#+END_SRC
*** Capture
#+begin_src emacs-lisp 
  (setq org-capture-templates '(; main capture functions
				("i" "inbox")
				("l" "log")
					  ; project
				("ie" "Emacs Inbox" checkitem (file+olp "~/git/meta/main.org" "Emacs" "Inbox") "")
				("le" "Emacs Log" entry (file+olp "~/git/meta/main.org" "Emacs" "Log") "*** %U ")
					  ; project
				("ij" "Job Search Inbox" checkitem (file+olp "~/git/meta/main.org" "Job Search" "Inbox") "")
				("lj" "Job Search Log" entry (file+olp "~/git/meta/main.org" "Job Search" "Log") "*** %U ")
					  ; project
				("im" "Miscellaneous Inbox" checkitem (file+olp "~/git/meta/main.org" "Miscellaneous" "Inbox") "")
				("lm" "Miscellaneous Log" entry (file+olp "~/git/meta/main.org" "Miscellaneous" "Log") "*** %U")
					  ; project
				("ii" "Interview Practice Inbox" checkitem (file+olp "~/git/meta/main.org" "Interview Practice" "Inbox") "")
				("li" "Interview Practice Log" entry (file+olp "~/git/meta/main.org" "Interview Practice" "Log") "*** %U")
					  ; project
				("ic" "Comps Inbox" checkitem (file+olp "~/git/meta/main.org" "Comps Practice" "Inbox") "")
				("lc" "Comps Log" entry (file+olp "~/git/meta/main.org" "Comps Practice" "Log") "*** %U")
					  ; project
				("ix" "Exercise Inbox" checkitem (file+olp "~/git/meta/main.org" "Exercise" "Inbox") "")
				("lx" "Exercise Log" entry (file+olp "~/git/meta/main.org" "Exercise" "Log") "*** %U")
					  ; project
				("ir" "Reputation Inbox" checkitem (file+olp "~/git/meta/main.org" "Reputation" "Inbox") "")
				("lr" "Reputation Log" entry (file+olp "~/git/meta/main.org" "Reputation" "Log") "*** %U")
					  ; project
				("it" "Thesis Inbox" checkitem (file+olp "~/git/meta/main.org" "Thesis" "Inbox") "")
				("lt" "Thesis Log" entry (file+olp "~/git/meta/main.org" "Thesis" "Log") "*** %U ")))
#+end_src
*** Literate Programming
#+begin_src emacs-lisp
(use-package jupyter
 :disabled)
#+end_src

#+begin_src emacs-lisp 
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted) 
  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "bibtex %b"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-src-fontify-natively t)
#+end_src

#+begin_src emacs-lisp 
   (setq geiser-active-implementations '(guile))
   
  (org-babel-do-load-languages 'org-babel-load-languages '((lisp . t)
							   (python . t)
							   (shell . t)
							   (scheme  . t)
							   (R . t)
							   (C . t)
							   ))

  (setq org-html-doctype "html5")
  (setq org-html-postamble t)
  (setq org-html-postamble-format '(("en" "<p class=\"author\">Author: %a (%e)</p>
   <p class=\"exporter\">Exporter: %c</p>
   <p class=\"modified\">Last modified: %C</p>")))

#+end_src
*** Org Reveal
 #+begin_src emacs-lisp 
 (use-package ox-reveal
   :config
   (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
 #+end_src
*** Other
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
  ;(add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-stuck-projects '("+project/-DONE" ("NEXT") nil ""))
  (setq org-tags-exclude-from-inheritance '("project"))
  (setq org-global-properties '(("EFFORT_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 1:15 1:30 1:45 2:00")))
  (setq org-catch-invisible-edits 'error)
  (setq org-default-priority 67)
  (setq org-refile-targets '((nil :maxlevel . 5)))
  (setq org-refile-use-outline-path t)
  (setq org-columns-default-format "%50ITEM %TODO %PRIORITY %DEADLINE %SCHEDULED %EFFORT{:} %CLOCKSUM_T{:} %TAGS")
  (setq org-archive-location "~/git/org/archive.org::* %s")
  (setq org-use-speed-commands t)
  (setq org-highlight-latex-and-related '(latex native script entities))
  ;; (add-to-list 'org-latex-classes  '("report2" "\\documentclass[11pt]{report}"
  ;; 				  ("\\chapter{%s}" . "\\chapter*{%s}")
  ;; 				  ("\\section{%s}" . "\\section*{%s}")
  ;; 				  ("\\subsection{%s}" . "\\subsection*{%s}")
  ;; 				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  ;; (require '
  ; ox-extra)
  ;(ox-extras-activate '(ignore-headlines))

#+end_src
*** Org Clock CSV
#+begin_src emacs-lisp
(use-package org-clock-csv)
#+end_src
*** Hugo 
#+begin_src emacs-lisp
  (use-package ox-hugo
    :config
    (defun my/org-get-title ()
    (nth 4 (org-heading-components)))

    (defun my/org-hugo-set-export-file-name ()
      (interactive)
      (org-set-property "EXPORT_FILE_NAME" (org-hugo-slug (my/org-get-title))))

    (defun my/org-hugo-set-all-export-file-name ()
      (interactive)
      (org-map-entries #'my/org-hugo-set-export-file-name "LEVEL=1")))
#+end_src
** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))
#+END_SRC

** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :bind (:map pdf-view-mode-map
        ("C-s" . isearch-forward-regexp))
    :config
    (pdf-tools-install :no-query-p)
    (setq-default pdf-view-display-size 'fit-page))

  (setq revert-without-query '(".*.pdf"))
#+end_src
** Python Tools

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    (setq python-shell-completion-native-enable nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;  (setq python-shell-interpreter "ipython"
;	python-shell-interpreter-args "-i")
#+END_SRC
** R Tools

#+BEGIN_SRC emacs-lisp
  (use-package ess-smart-underscore)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ess-eval-visibly 'nowait)
#+END_SRC

** Polymode

#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure markdown-mode
    :ensure poly-R)
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
	  which-key-side-window-max-width 0.33
	  which-key-idle-delay 1.0)
    :diminish which-key-mode)
#+END_SRC
** Command Frequency
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :init
    (keyfreq-mode)
    :config
    (keyfreq-autosave-mode)
    (setq keyfreq-excluded-commands '(self-insert-command
				      next-line
				      previous-line
				      org-self-insert-command
				      forward-char
				      backward-char
				      delete-backward-char
				      org-delete-backward-char)))
#+END_SRC
** Custom Utility Functions
#+BEGIN_SRC emacs-lisp
  (defun unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
      logical line.  This is useful, e.g., for use with
      `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))
#+END_SRC
** TODO Ecrypting Files
#+BEGIN_SRC emacs-lisp
  ;; (use-package epa-file
  ;;   :ensure nil
  ;;   :init (epa-file-enable))
#+END_SRC
** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC
** Restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode))
#+END_SRC
** Gnus
#+BEGIN_SRC emacs-lisp
(setq gnus-init-file "~/.emacs.d/gnus.el")
(setq mail-user-agent 'gnus-user-agent)
(setq send-mail-function 'smtpmail-send-it)
(setq gnus-asynchronous t)
#+END_SRC
** Org-Mime
#+BEGIN_SRC emacs-lisp
  (use-package org-mime)
#+END_SRC
** ERC
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :bind (("C-c e" . my/erc-start-or-switch))
    :config
    (setq erc-server "irc.freenode.net"
	  erc-nick "shukryzablah")
    ;; Kill buffers for channels after /part
    (setq erc-kill-buffer-on-part t)
    ;; Kill buffers for private queries after quitting the server
    (setq erc-kill-queries-on-quit t)
    ;; Kill buffers for server messages after quitting the server
    (setq erc-kill-server-buffer-on-quit t)
    (setq erc-hide-list '("PART" "QUIT" "JOIN"))
    (setq erc-prompt-for-password 'nil)
    (setq erc-prompt-for-nickserv-password 'nil)

    (defun my/erc-start-or-switch ()
      "Connects to ERC, or switch to last active buffer."
      (interactive)
      (if (get-buffer "irc.freenode.net:6667")
	  (erc-track-switch-buffer 1)
	(when (y-or-n-p "Start ERC? ")
	  (erc :server "irc.freenode.net" :port 6667 :nick "shukryzablah"))))

    (defun my/erc-count-users ()
      "Displays the number of users connected on the current channel."
      (interactive)
      (if (get-buffer "irc.freenode.net:6667")
	  (let ((channel (erc-default-target)))
	    (if (and channel (erc-channel-p channel))
		(message "%d users are online on %s"
			 (hash-table-count erc-channel-users)
			 channel)
	      (user-error "The current buffer is not a channel")))
	(user-error "You must first start ERC")))

    (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs")))

    (setq erc-modules '(autoaway autojoin button completion fill
    irccontrols keep-place list match menu move-to-prompt netsplit
    networks noncommands notifications readonly ring services stamp
    track))

    (erc-update-modules))
#+END_SRC
** Authinfo
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.emacs.d/authinfo.gpg"
		       "~/.authinfo.gpg"
		       "~/.authinfo"
		       "~/.netrc"))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
					  ; using any means: via a hook or by user
					  ; Feel free to add more commands to this
					  ; list to suit your needs.
    :init ; stuff to do before requiring the package
    (progn
      (add-hook 'prog-mode-hook #'yas-minor-mode)
      (add-hook 'org-mode-hook #'yas-minor-mode))
    :config ; stuff to do after requiring the package
    (progn
      (yas-reload-all)))

  (use-package yasnippet-snippets
    :demand)
#+END_SRC
** Ivy/Swiper/Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :demand
    :config 
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "(%d/%d) "))

  (use-package counsel
    :after ivy
    :config (counsel-mode 1))

  (use-package swiper
    :bind (("C-s" . swiper-isearch))
    :after ivy)

  (use-package flx)

  (use-package ivy-rich
    :after ivy
    :demand
    :init
    (setq ivy-rich--original-display-transformers-list nil) 
    (setq ivy-rich-path-style 'abbrev
	  ivy-virtual-abbreviate 'full)
    :config
    (ivy-rich-mode 1))
#+end_src
** Common Lisp (SLIME)
#+begin_src emacs-lisp
    (use-package slime
      :config
      (load (expand-file-name "~/quicklisp/slime-helper.el"))
      (setq inferior-lisp-program "/usr/bin/sbcl"
	    slime-contribs '(slime-fancy slime-quicklisp)))
#+end_src
** Latex
#+begin_src emacs-lisp 
  (use-package tex
    :ensure auctex
    :config 
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-PDF-mode t)
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq TeX-source-correlate-start-server t)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (add-hook 'LaTeX-mode-hook 'pdf-tools-install))

  (use-package reftex)
#+end_src
** EXWM
#+begin_src emacs-lisp 
  (use-package exwm
    :config
    (setq exwm-workspace-number 4)
    (setq exwm-input-global-keys `(;; 's-r': Reset (to line-mode).
				   ([?\s-r] . exwm-reset)
				   ;; 's-w': Switch workspace.
				   ([?\s-w] . exwm-workspace-switch)
				   ;; 's-&': Launch application.
				   ([?\s-&] . (lambda (command)
						(interactive (list (read-shell-command "$ ")))
						(start-process-shell-command command nil command)))
				   ;; 's-N': Switch to certain workspace.
				   ,@(mapcar (lambda (i)
					       `(,(kbd (format "s-%d" i)) .
						 (lambda ()
						   (interactive)
						   (exwm-workspace-switch-create ,i))))
					     (number-sequence 0 9))))

    (setq exwm-input-simulation-keys
	  '(([?\C-b] . [left])
	    ([?\C-f] . [right])
	    ([?\C-p] . [up])
	    ([?\C-n] . [down])
	    ([?\C-a] . [home])
	    ([?\C-e] . [end])
	    ([?\M-v] . [prior])
	    ([?\C-v] . [next])
	    ([?\C-d] . [delete])
	    ([?\C-k] . [S-end delete])))

  ;; Enable EXWM
  (exwm-enable))
#+end_src

+PROPERTY: header-args :results silent
* Emacs Init Settings
** Setup Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       (cons "melpa" "https://melpa.org/packages/")
	       t)
  (package-initialize)
#+END_SRC
** Use Package Settings
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t ; Auto-download package if not exists
	;use-package-verbose nil ; Don't report loading details
	;use-package-expand-minimally t  ; make the expanded code as minimal as possible
	;use-package-enable-imenu-support t ; Let imenu finds use-package definitions
	use-package-always-defer t) ; Always defer load package to speed up startup

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
** Custom Variables and Faces
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC
** Key Bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** General Appearance and Behavior
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (column-number-mode 1)
  (display-battery-mode 1)
  (blink-cursor-mode 0)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq echo-keystrokes 0.1)
  ;(setq visible-bell t)
  (setq dired-listing-switches "-alh")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :disabled
    :init
    (load-theme 'zenburn t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init
    (setq doom-themes-enable-bold t  
	  doom-themes-enable-italic t) 
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-bar-width 6
	  doom-modeline-buffer-encoding t
	  doom-modeline-continuous-word-count-modes '(markdown-mode org-mode)
	  doom-modeline-enable-word-count t
	  doom-modeline-github nil
	  doom-modeline-gnus t
	  doom-modeline-gnus-timer 5
	  doom-modeline-height 25
	  doom-modeline-icon t
	  doom-modeline-indent-info nil
	  doom-modeline-mu4e nil
	  doom-modeline-unicode-fallback t
	  doom-modeline-vcs-max-length 10)
    )

  (use-package ghub)
  (use-package async)
  (use-package circe)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  ;run M-x all-the-icons-install-fonts
#+END_SRC

Put all the backup files and auto-saves into the directory pointed by
temporary-file-directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC

** Org Mode Customizations

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
  ;(add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "HOLD(h@/!)"  "|" "DONE(d!)" "CANCELED(c@/!)"))
	org-todo-keyword-faces '(
				 ("TODO" . (:foreground "red" :weight bold))
				 ("NEXT" . (:foreground "yellow" :weight bold))
				 ("DONE" . (:foreground "green" :weight bold))
				 ("HOLD" . (:foreground "magenta" :weight bold))
				 ("WAITING" . (:foreground "orange" :weight bold))
				 ("CANCELED" . (:foreground "gray" :weight bold))
				 )
	)
  ;(setq org-enforce-todo-dependencies t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (setq org-agenda-custom-commands 
	  '(("x" "NEXT tasks / Agenda / Stuck"
	     (
	      (todo "NEXT" nil)
	      (agenda ""
		      ((org-agenda-span
			(quote day))))
	      (stuck "" nil))
	     nil
	     ("~git/meta/main.html"))))

  (setq org-stuck-projects (quote ("+PROJECT/-DONE" ("NEXT") nil "")))
  (setq org-tags-exclude-from-inheritance (quote ("PROJECT")))

  (setq org-global-properties (quote (("Effort_ALL" . "0 0:05 0:10 0:30 1:00 2:00 3:00 4:00"))))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))
#+END_SRC

** PDF Tools

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :defer 5
    :init
    (pdf-tools-install)
    :config
    (setq-default pdf-view-display-size 'fit-page))
#+END_SRC
** Python Tools

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    (setq python-shell-completion-native-enable nil)
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
;  (setq python-shell-interpreter "ipython"
;	python-shell-interpreter-args "-i")
#+END_SRC
** R Tools

#+BEGIN_SRC emacs-lisp
  (use-package ess-smart-underscore)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ess-eval-visibly 'nowait)
#+END_SRC

** Polymode

#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure markdown-mode
    :ensure poly-R)
#+END_SRC

** Dired 
#+BEGIN_SRC emacs-lisp 
	(use-package dired-git-info
		:bind (:map dired-mode-map
								(")" . dired-git-info-mode)))

	;;(use-package diredfl
	;;   :after dired
	;;   :hook ((after-init . diredfl-global-mode)))

	;; (use-package dired-rainbow
	;;   :after dired
	;;   :commands dired-rainbow-define dired-rainbow-define-chmod
	;;   :config
	;;   (progn
	;;   (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
	;;   (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
	;;   (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
	;;   (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
	;;   (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
	;;   (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
	;;   (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
	;;   (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
	;;   (dired-rainbow-define log "#c17d11" ("log"))
	;;   (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
	;;   (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
	;;   (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
	;;   (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
	;;   (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
	;;   (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
	;;   (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
	;;   (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
	;;   (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
	;;   (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
	;;   (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
	;;   )) 
#+END_SRC
** Which Key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
	  which-key-side-window-max-width 0.33
	  which-key-idle-delay 1.0)
    :diminish which-key-mode)
#+END_SRC
** Command Frequency

#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :init
    (keyfreq-mode)
    :config
    (keyfreq-autosave-mode))
#+END_SRC
** Custom Utility Functions

#+BEGIN_SRC emacs-lisp
  (defun unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
      logical line.  This is useful, e.g., for use with
      `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))
#+END_SRC
** Ecrypting Files
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :ensure nil
    :init (epa-file-enable))
#+END_SRC
** Htmlize

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC
** Restclient

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode))
#+END_SRC
** Gnus
#+BEGIN_SRC emacs-lisp
(setq gnus-init-file "~/.emacs.d/gnus.el")
(setq mail-user-agent 'gnus-user-agent)
(setq send-mail-function 'smtpmail-send-it)
#+END_SRC
** Org-Mime
#+BEGIN_SRC emacs-lisp
  (use-package org-mime)
#+END_SRC
** Authinfo
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.emacs.d/authinfo.gpg"
		       "~/.authinfo.gpg"
		       "~/.authinfo"
		       "~/.netrc"))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
					  ; using any means: via a hook or by user
					  ; Feel free to add more commands to this
					  ; list to suit your needs.
    :init ; stuff to do before requiring the package
    (progn
      (add-hook 'prog-mode-hook #'yas-minor-mode)
      (add-hook 'org-mode-hook #'yas-minor-mode))
    :config ; stuff to do after requiring the package
    (progn
      (yas-reload-all)))

  (use-package yasnippet-snippets
    :demand)
#+END_SRC
